// Code generated by mockery v1.0.0. DO NOT EDIT.

package actions_mock

import (
	actions "github.com/bi-zone/sonar/internal/actions"
	database "github.com/bi-zone/sonar/internal/database"

	errors "github.com/bi-zone/sonar/internal/utils/errors"

	mock "github.com/stretchr/testify/mock"
)

// Actions is an autogenerated mock type for the Actions type
type Actions struct {
	mock.Mock
}

// CreatePayload provides a mock function with given fields: _a0, _a1
func (_m *Actions) CreatePayload(_a0 *database.User, _a1 actions.CreatePayloadParams) (*database.Payload, errors.Error) {
	ret := _m.Called(_a0, _a1)

	var r0 *database.Payload
	if rf, ok := ret.Get(0).(func(*database.User, actions.CreatePayloadParams) *database.Payload); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Payload)
		}
	}

	var r1 errors.Error
	if rf, ok := ret.Get(1).(func(*database.User, actions.CreatePayloadParams) errors.Error); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.Error)
		}
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: _a0, _a1
func (_m *Actions) CreateUser(_a0 *database.User, _a1 actions.CreateUserParams) (*database.User, errors.Error) {
	ret := _m.Called(_a0, _a1)

	var r0 *database.User
	if rf, ok := ret.Get(0).(func(*database.User, actions.CreateUserParams) *database.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.User)
		}
	}

	var r1 errors.Error
	if rf, ok := ret.Get(1).(func(*database.User, actions.CreateUserParams) errors.Error); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.Error)
		}
	}

	return r0, r1
}

// DeletePayload provides a mock function with given fields: _a0, _a1
func (_m *Actions) DeletePayload(_a0 *database.User, _a1 actions.DeletePayloadParams) (*actions.MessageResult, errors.Error) {
	ret := _m.Called(_a0, _a1)

	var r0 *actions.MessageResult
	if rf, ok := ret.Get(0).(func(*database.User, actions.DeletePayloadParams) *actions.MessageResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*actions.MessageResult)
		}
	}

	var r1 errors.Error
	if rf, ok := ret.Get(1).(func(*database.User, actions.DeletePayloadParams) errors.Error); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.Error)
		}
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: _a0, _a1
func (_m *Actions) DeleteUser(_a0 *database.User, _a1 actions.DeleteUserParams) (*actions.MessageResult, errors.Error) {
	ret := _m.Called(_a0, _a1)

	var r0 *actions.MessageResult
	if rf, ok := ret.Get(0).(func(*database.User, actions.DeleteUserParams) *actions.MessageResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*actions.MessageResult)
		}
	}

	var r1 errors.Error
	if rf, ok := ret.Get(1).(func(*database.User, actions.DeleteUserParams) errors.Error); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.Error)
		}
	}

	return r0, r1
}

// ListPayloads provides a mock function with given fields: _a0, _a1
func (_m *Actions) ListPayloads(_a0 *database.User, _a1 actions.ListPayloadsParams) ([]*database.Payload, errors.Error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*database.Payload
	if rf, ok := ret.Get(0).(func(*database.User, actions.ListPayloadsParams) []*database.Payload); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*database.Payload)
		}
	}

	var r1 errors.Error
	if rf, ok := ret.Get(1).(func(*database.User, actions.ListPayloadsParams) errors.Error); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.Error)
		}
	}

	return r0, r1
}
