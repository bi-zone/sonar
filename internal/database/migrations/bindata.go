// Code generated by go-bindata. DO NOT EDIT.
// sources:
// internal/database/migrations/000001_initial_schema.down.sql (60B)
// internal/database/migrations/000001_initial_schema.up.sql (384B)
// internal/database/migrations/000002_payload_handlers.down.sql (43B)
// internal/database/migrations/000002_payload_handlers.up.sql (49B)
// internal/database/migrations/000003_user_params.down.sql (38B)
// internal/database/migrations/000003_user_params.up.sql (65B)
// internal/database/migrations/000004_user_id_serial.down.sql (76B)
// internal/database/migrations/000004_user_id_serial.up.sql (114B)
// internal/database/migrations/000005_generate_api_token.down.sql (85B)
// internal/database/migrations/000005_generate_api_token.up.sql (206B)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_initial_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x48\xac\xcc\xc9\x4f\x4c\x29\xb6\xe6\xe2\xc2\x2a\x5f\x5a\x9c\x5a\x54\x6c\xcd\x05\x08\x00\x00\xff\xff\xd4\xb4\xd8\x21\x3c\x00\x00\x00")

func _000001_initial_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initial_schemaDownSql,
		"000001_initial_schema.down.sql",
	)
}

func _000001_initial_schemaDownSql() (*asset, error) {
	bytes, err := _000001_initial_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_initial_schema.down.sql", size: 60, mode: os.FileMode(0644), modTime: time.Unix(1582372276, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf9, 0x38, 0x93, 0xb3, 0x78, 0x3b, 0x41, 0x13, 0x87, 0x46, 0x1e, 0xc1, 0x23, 0x8d, 0x4b, 0x40, 0x62, 0x91, 0x7e, 0xf5, 0x52, 0x5a, 0xcf, 0xdd, 0x91, 0x6, 0xca, 0xee, 0x4f, 0x7a, 0x20, 0xcf}}
	return a, nil
}

var __000001_initial_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfa\x8a\x39\xc6\x90\x3f\xe8\x49\x55\x26\x20\x2a\x2b\xa9\xb4\x86\xe4\x14\xd4\x4a\x07\x43\x93\x94\x38\x39\xf4\xef\x4b\x6c\x63\x0a\x06\xd3\xab\x34\x3b\xfb\xde\x9a\x40\x2d\x84\xe8\x57\x47\xd8\x2d\xfc\x4e\xc0\x83\x8d\x12\xf1\xe8\xca\xad\xc3\x4a\x01\x40\x9b\x61\xbd\x60\x1f\x6c\xad\xc3\x11\x6f\x3c\xae\xfb\xf7\x4b\x3a\x17\x08\x0f\xd2\x0f\xfa\xc6\x39\x34\xde\xbe\x37\x1c\xbe\x3f\x6f\x25\xdd\x4b\x3e\xa5\x3b\xc4\xd6\x8c\xa2\xeb\xfd\x94\x54\xd5\x8b\x52\x0b\xfb\xbf\xd3\xcf\xd7\x35\xe5\x3f\x08\x91\xc1\x6a\x37\xa7\x78\x92\x9e\x46\xc4\x89\x23\x70\xcb\x40\x6f\x38\x99\xb4\xb9\xc2\xce\x63\x43\x47\x21\x8c\x8e\x46\x6f\x46\xd0\xee\xf1\x91\xaf\xe7\xd4\x5e\x16\x64\xe6\xae\xff\x90\x1c\x22\x43\x0d\x56\x23\xe8\xba\xef\xaa\x9e\x07\xf8\x0d\x00\x00\xff\xff\x7b\x33\x1f\x01\x80\x01\x00\x00")

func _000001_initial_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initial_schemaUpSql,
		"000001_initial_schema.up.sql",
	)
}

func _000001_initial_schemaUpSql() (*asset, error) {
	bytes, err := _000001_initial_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_initial_schema.up.sql", size: 384, mode: os.FileMode(0644), modTime: time.Unix(1582372276, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5a, 0x6, 0x56, 0xde, 0x79, 0xfb, 0xfd, 0xd8, 0x33, 0x1a, 0x39, 0xe7, 0x99, 0xe0, 0x66, 0x90, 0x43, 0xab, 0x4f, 0xf6, 0x10, 0x31, 0x62, 0xc, 0x8, 0x8f, 0x47, 0x15, 0xd8, 0xbe, 0x1, 0x69}}
	return a, nil
}

var __000002_payload_handlersDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x48\xac\xcc\xc9\x4f\x4c\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\xc8\x48\xcc\x4b\xc9\x49\x2d\x2a\xb6\xe6\x02\x04\x00\x00\xff\xff\xa1\xe4\x1d\x85\x2b\x00\x00\x00")

func _000002_payload_handlersDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_payload_handlersDownSql,
		"000002_payload_handlers.down.sql",
	)
}

func _000002_payload_handlersDownSql() (*asset, error) {
	bytes, err := _000002_payload_handlersDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_payload_handlers.down.sql", size: 43, mode: os.FileMode(0644), modTime: time.Unix(1582372276, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x70, 0x73, 0x53, 0x5a, 0xf9, 0x18, 0x34, 0x97, 0x1b, 0x21, 0x4d, 0x80, 0x54, 0x4c, 0x7c, 0x80, 0xad, 0xcf, 0x8f, 0x86, 0x37, 0x5d, 0xfd, 0x31, 0xc1, 0x1d, 0x7d, 0x79, 0x91, 0x7f, 0xf8, 0x5a}}
	return a, nil
}

var __000002_payload_handlersUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x48\xac\xcc\xc9\x4f\x4c\x29\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\xc8\x48\xcc\x4b\xc9\x49\x2d\x2a\x56\x08\x71\x8d\x08\x89\x8e\xb5\xe6\x02\x04\x00\x00\xff\xff\x20\xb6\xb7\xb4\x31\x00\x00\x00")

func _000002_payload_handlersUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_payload_handlersUpSql,
		"000002_payload_handlers.up.sql",
	)
}

func _000002_payload_handlersUpSql() (*asset, error) {
	bytes, err := _000002_payload_handlersUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_payload_handlers.up.sql", size: 49, mode: os.FileMode(0644), modTime: time.Unix(1582372276, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8d, 0x72, 0xcf, 0x83, 0x13, 0x89, 0xb4, 0x67, 0x4f, 0xb5, 0xa2, 0x2d, 0xea, 0xfe, 0x86, 0x13, 0xef, 0x93, 0x8d, 0x3c, 0x5b, 0xa5, 0x26, 0x8c, 0xfa, 0x6b, 0xc4, 0xbb, 0xe5, 0xe, 0x57, 0x54}}
	return a, nil
}

var __000003_user_paramsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x48\x2c\x4a\xcc\x2d\xb6\xe6\x02\x04\x00\x00\xff\xff\xac\x20\xc2\x51\x26\x00\x00\x00")

func _000003_user_paramsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_user_paramsDownSql,
		"000003_user_params.down.sql",
	)
}

func _000003_user_paramsDownSql() (*asset, error) {
	bytes, err := _000003_user_paramsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_user_params.down.sql", size: 38, mode: os.FileMode(0644), modTime: time.Unix(1582372276, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x24, 0x87, 0x4e, 0xb0, 0x37, 0xb4, 0x75, 0x2f, 0x27, 0xb0, 0x7c, 0x34, 0xc4, 0x6b, 0xb4, 0xf0, 0x8c, 0x43, 0x97, 0xa8, 0x5d, 0x5b, 0xa8, 0xec, 0x83, 0x21, 0xff, 0x6e, 0x2d, 0x40, 0x8d, 0x17}}
	return a, nil
}

var __000003_user_paramsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x48\x2c\x4a\xcc\x2d\x56\xf0\x0a\xf6\xf7\x73\x52\xf0\xf3\x0f\x51\xf0\x0b\xf5\xf1\x51\x70\x71\x75\x73\x0c\xf5\x09\x51\x50\xaf\xae\x55\xb7\xe6\x02\x04\x00\x00\xff\xff\x24\x04\x2f\xee\x41\x00\x00\x00")

func _000003_user_paramsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_user_paramsUpSql,
		"000003_user_params.up.sql",
	)
}

func _000003_user_paramsUpSql() (*asset, error) {
	bytes, err := _000003_user_paramsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_user_params.up.sql", size: 65, mode: os.FileMode(0644), modTime: time.Unix(1582372276, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2c, 0xf6, 0x8b, 0xa3, 0xc5, 0xd6, 0x68, 0x59, 0x17, 0xde, 0xc5, 0x79, 0xfb, 0x76, 0xf, 0xf5, 0xf8, 0x66, 0x78, 0x7c, 0x50, 0xc6, 0xfc, 0x28, 0x60, 0xd1, 0x12, 0x2c, 0x4, 0x70, 0xdc, 0x26}}
	return a, nil
}

var __000004_user_id_serialDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\x56\x80\x88\x38\xfb\xfb\x84\xfa\xfa\x29\x64\xa6\x28\xb8\x04\xf9\x07\x28\xb8\xb8\xba\x39\x86\xfa\x84\x58\x73\x81\x79\xc1\xae\x81\xa1\xae\x7e\xce\x50\x1d\xf1\x99\x29\xf1\xc5\xa9\x85\xd6\x5c\x80\x00\x00\x00\xff\xff\x3b\x0b\x9a\x66\x4c\x00\x00\x00")

func _000004_user_id_serialDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000004_user_id_serialDownSql,
		"000004_user_id_serial.down.sql",
	)
}

func _000004_user_id_serialDownSql() (*asset, error) {
	bytes, err := _000004_user_id_serialDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000004_user_id_serial.down.sql", size: 76, mode: os.FileMode(0644), modTime: time.Unix(1585237765, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xee, 0xc2, 0x8d, 0x57, 0xd0, 0x34, 0xff, 0xa0, 0xcf, 0x9c, 0xad, 0x42, 0x80, 0xa8, 0xc1, 0xc6, 0x3a, 0xf7, 0x7d, 0xf6, 0xba, 0xb6, 0xd7, 0x32, 0x76, 0xe2, 0x51, 0xbd, 0x3, 0x6d, 0x79, 0xd3}}
	return a, nil
}

var __000004_user_id_serialUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x76\x0d\x0c\x75\xf5\x73\x76\x55\x28\x2d\x4e\x2d\x2a\x8e\xcf\x4c\x89\x2f\x4e\x2d\x54\x08\x0e\x71\x0c\x0a\x51\x08\xf7\x0c\xf1\x50\x30\xb4\xe6\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x81\x2a\x53\x80\x88\x38\xfb\xfb\x84\xfa\xfa\x29\x64\xa6\x28\x04\xbb\x86\x28\xb8\xb8\xba\x39\x86\xfa\x84\x28\xe4\xa5\x56\x94\x94\x25\xe6\x68\xa8\x23\x9b\xa8\xae\x69\xcd\x05\x08\x00\x00\xff\xff\x6c\x11\xba\xde\x72\x00\x00\x00")

func _000004_user_id_serialUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000004_user_id_serialUpSql,
		"000004_user_id_serial.up.sql",
	)
}

func _000004_user_id_serialUpSql() (*asset, error) {
	bytes, err := _000004_user_id_serialUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000004_user_id_serial.up.sql", size: 114, mode: os.FileMode(0644), modTime: time.Unix(1585237769, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0x63, 0x16, 0x54, 0xe7, 0xf1, 0xc4, 0x1b, 0x40, 0xa6, 0x5c, 0x37, 0x23, 0xb0, 0x58, 0xc3, 0x90, 0xb6, 0xde, 0x5, 0x4f, 0xe0, 0xdc, 0xa6, 0xf2, 0xf2, 0x20, 0xc8, 0x66, 0xc0, 0xe4, 0xaf}}
	return a, nil
}

var __000005_generate_api_tokenDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x48\xad\x28\x49\xcd\x2b\xce\xcc\xcf\x53\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x48\x4f\x2e\xaa\x2c\x28\xc9\xb7\xe6\x0a\x0d\x70\x71\x0c\x71\x55\x28\x2d\x4e\x2d\x2a\x56\x08\x76\x0d\x51\x28\x48\x2c\x4a\xcc\x2d\x56\xb0\x85\x31\x94\x75\x15\xd4\xab\x13\x0b\x32\x43\xf2\xb3\x53\xf3\x6a\xd5\xad\xb9\x00\x01\x00\x00\xff\xff\x3f\xd7\xc5\xd0\x55\x00\x00\x00")

func _000005_generate_api_tokenDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000005_generate_api_tokenDownSql,
		"000005_generate_api_token.down.sql",
	)
}

func _000005_generate_api_tokenDownSql() (*asset, error) {
	bytes, err := _000005_generate_api_tokenDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000005_generate_api_token.down.sql", size: 85, mode: os.FileMode(0644), modTime: time.Unix(1585243380, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x18, 0x74, 0x34, 0x14, 0x90, 0xce, 0x3, 0x44, 0x51, 0x53, 0x7d, 0x4f, 0xbf, 0xdf, 0xc0, 0x42, 0x6d, 0x15, 0x20, 0xcc, 0x41, 0xd8, 0xa, 0x9e, 0x0, 0xed, 0xa0, 0x48, 0x23, 0x78, 0x0, 0x12}}
	return a, nil
}

var __000005_generate_api_tokenUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\x41\x6b\x83\x30\x18\x86\xef\xfe\x8a\xef\x16\x05\x77\xd8\x65\x17\xd9\xc6\xd8\x32\x26\x88\x0e\x13\xd9\x6e\x21\xd1\x0f\xab\xad\x49\x48\x22\x28\xf8\xe3\x4b\x8b\xa5\xbd\xbd\x3c\xbc\x3c\x3c\x9f\x35\xfd\xe0\x14\x70\x09\xa8\xfd\x60\x34\xe4\xdf\x50\x56\x1c\xe8\x7f\xce\x38\x03\xdb\xb7\x6e\xb5\xc1\x64\x51\xf3\xfb\x75\x39\xce\x1e\x9d\x07\x46\x39\x58\xe9\xe4\xe4\xe1\xf5\x36\xb6\x0d\x46\x6f\xb4\x12\x6a\x1e\x4e\x9d\x30\x6a\xc4\x36\xc4\x44\xda\x81\x9b\x23\x6a\x92\x02\xea\xd6\x74\x18\xf7\xa8\x85\x93\xba\x33\x93\x50\x6b\x40\x1f\x3f\xbf\x24\x29\x90\x03\x2e\x24\x49\xe0\xef\x87\xd6\xf4\x9a\xb0\x7b\xdf\xe1\xee\x80\xaa\xde\xf1\xd3\xdb\x03\xcd\x19\x94\x4d\x51\x64\xd1\x39\x00\x00\xff\xff\x78\x53\x89\x6a\xce\x00\x00\x00")

func _000005_generate_api_tokenUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000005_generate_api_tokenUpSql,
		"000005_generate_api_token.up.sql",
	)
}

func _000005_generate_api_tokenUpSql() (*asset, error) {
	bytes, err := _000005_generate_api_tokenUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000005_generate_api_token.up.sql", size: 206, mode: os.FileMode(0644), modTime: time.Unix(1585243372, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc0, 0xe5, 0xae, 0xd1, 0x5, 0x19, 0x63, 0x67, 0x78, 0x2d, 0x2b, 0x3c, 0x5d, 0x7c, 0x4a, 0x75, 0x26, 0x98, 0x82, 0x9a, 0xef, 0x4b, 0xc4, 0xd4, 0xc, 0xb1, 0xda, 0xec, 0x28, 0xe2, 0x9a, 0x70}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_initial_schema.down.sql":     _000001_initial_schemaDownSql,
	"000001_initial_schema.up.sql":       _000001_initial_schemaUpSql,
	"000002_payload_handlers.down.sql":   _000002_payload_handlersDownSql,
	"000002_payload_handlers.up.sql":     _000002_payload_handlersUpSql,
	"000003_user_params.down.sql":        _000003_user_paramsDownSql,
	"000003_user_params.up.sql":          _000003_user_paramsUpSql,
	"000004_user_id_serial.down.sql":     _000004_user_id_serialDownSql,
	"000004_user_id_serial.up.sql":       _000004_user_id_serialUpSql,
	"000005_generate_api_token.down.sql": _000005_generate_api_tokenDownSql,
	"000005_generate_api_token.up.sql":   _000005_generate_api_tokenUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_initial_schema.down.sql":     &bintree{_000001_initial_schemaDownSql, map[string]*bintree{}},
	"000001_initial_schema.up.sql":       &bintree{_000001_initial_schemaUpSql, map[string]*bintree{}},
	"000002_payload_handlers.down.sql":   &bintree{_000002_payload_handlersDownSql, map[string]*bintree{}},
	"000002_payload_handlers.up.sql":     &bintree{_000002_payload_handlersUpSql, map[string]*bintree{}},
	"000003_user_params.down.sql":        &bintree{_000003_user_paramsDownSql, map[string]*bintree{}},
	"000003_user_params.up.sql":          &bintree{_000003_user_paramsUpSql, map[string]*bintree{}},
	"000004_user_id_serial.down.sql":     &bintree{_000004_user_id_serialDownSql, map[string]*bintree{}},
	"000004_user_id_serial.up.sql":       &bintree{_000004_user_id_serialUpSql, map[string]*bintree{}},
	"000005_generate_api_token.down.sql": &bintree{_000005_generate_api_tokenDownSql, map[string]*bintree{}},
	"000005_generate_api_token.up.sql":   &bintree{_000005_generate_api_tokenUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
